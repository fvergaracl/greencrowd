generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  sub                 String               @unique
  dataEntries         DataEntry[]
  logs                Log[]
  trajectories        UserTrajectory[]
  accessibleCampaigns UserCampaignAccess[] @relation("UserCampaignAccess")
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
}

model Campaign {
  id           String               @id @default(uuid())
  name         String
  description  String?
  isOpen       Boolean              @default(true)
  disabled     Boolean              @default(false)
  deadline     DateTime?
  category     String
  gameId       String?
  areas        Area[]
  allowedUsers UserCampaignAccess[] @relation("UserCampaignAccess")
  created_at   DateTime             @default(now())
  updated_at   DateTime             @updatedAt
}

model Area {
  id               String            @id @default(uuid())
  name             String
  description      String?
  campaignId       String
  disabled         Boolean           @default(false)
  campaign         Campaign          @relation(fields: [campaignId], references: [id])
  pointOfInterests PointOfInterest[] // Relation with PointOfInterests
  polygon          Json
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}

model PointOfInterest {
  id         String   @id @default(uuid())
  disabled   Boolean  @default(false)
  areaId     String
  area       Area     @relation(fields: [areaId], references: [id])
  latitude   Float
  longitude  Float
  tasks      Task[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Task {
  id                String          @id @default(uuid())
  title             String
  description       String?
  type              String // "survey", "photo", "instruction"
  taskData          Json // Stores questions, options, etc.
  disabled          Boolean         @default(false)
  dataEntries       DataEntry[]
  pointOfInterestId String
  pointOfInterest   PointOfInterest @relation(fields: [pointOfInterestId], references: [id])
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}

model UserTrajectory {
  id         String   @id @default(uuid())
  userId     String
  latitude   Float
  longitude  Float
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserCampaignAccess {
  id         String   @id @default(uuid())
  userId     String
  campaignId String
  accessType String // "admin", "editor", "viewer", "contributor"
  user       User     @relation("UserCampaignAccess", fields: [userId], references: [id])
  campaign   Campaign @relation("UserCampaignAccess", fields: [campaignId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([userId, campaignId])
}

model DataEntry {
  id         String   @id @default(uuid())
  userId     String
  taskId     String?
  data       Json
  latitude   Float
  longitude  Float
  user       User?    @relation(fields: [userId], references: [id])
  task       Task?    @relation(fields: [taskId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Log {
  id          String   @id @default(uuid())
  userId      String?
  eventType   String
  description String?
  metadata    Json
  user        User?    @relation(fields: [userId], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
