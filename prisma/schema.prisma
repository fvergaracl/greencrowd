generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  sub                 String               @unique
  alias               String?
  UserTaskResponses   UserTaskResponse[]
  logs                Log[]
  trajectories        UserTrajectory[]
  accessibleCampaigns UserCampaignAccess[] @relation("UserCampaignAccess")
  settings            UserSetting?
  isDisabled          Boolean?             @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model UserSetting {
  id                   String    @id @default(uuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id]) // Relation with User
  language             String    @default("en") // Default language
  theme                String    @default("light") // Theme: "light" or "dark"
  timezone             String?   @default("UTC") // Timezone preference
  notificationsEnabled Boolean   @default(true) // User notifications preference
  metadata             Json? // Additional settings in JSON format
  lastLogin            DateTime? // Last login date and time
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Campaign {
  id            String               @id @default(uuid())
  name          String
  description   String?
  isOpen        Boolean              @default(true)
  location      String?
  startDatetime DateTime?
  endDatetime   DateTime?
  category      String
  gameId        String?
  isDisabled    Boolean?             @default(false)
  areas         Area[]
  allowedUsers  UserCampaignAccess[] @relation("UserCampaignAccess")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model Area {
  id               String            @id @default(uuid())
  name             String
  description      String?
  campaignId       String
  disabled         Boolean           @default(false)
  campaign         Campaign          @relation(fields: [campaignId], references: [id])
  pointOfInterests PointOfInterest[] // Relation with PointOfInterests
  polygon          Json
  isDisabled       Boolean?          @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model PointOfInterest {
  id          String   @id @default(uuid())
  name        String
  description String?
  radius      Float    @default(15) // In meters
  disabled    Boolean  @default(false)
  areaId      String
  area        Area     @relation(fields: [areaId], references: [id])
  latitude    Float
  longitude   Float
  isDisabled  Boolean? @default(false)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id                    String             @id @default(uuid())
  title                 String
  description           String?
  type                  String // "survey", "photo", "instruction"
  taskData              Json // Stores questions, options, etc.
  disabled              Boolean            @default(false)
  UserTaskResponses     UserTaskResponse[]
  responseLimit         Int? // 1 = single response, N = limited responses, null = unlimited
  responseLimitInterval Int? // Time interval in minutes for response limit (null = no interval limit)
  availableFrom         DateTime? // Task availability start time
  availableTo           DateTime? // Task availability end time
  isDisabled            Boolean?           @default(false)
  pointOfInterestId     String
  pointOfInterest       PointOfInterest    @relation(fields: [pointOfInterestId], references: [id])
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}

model UserTrajectory {
  id        String   @id @default(uuid())
  userId    String
  latitude  Float
  longitude Float
  user      User     @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now())
}

model UserCampaignAccess {
  id         String   @id @default(uuid())
  userId     String
  campaignId String
  accessType String // "admin", "editor", "viewer", "contributor"
  user       User     @relation("UserCampaignAccess", fields: [userId], references: [id])
  campaign   Campaign @relation("UserCampaignAccess", fields: [campaignId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, campaignId])
}

model UserTaskResponse {
  id        String   @id @default(uuid())
  userId    String
  taskId    String?
  data      Json
  latitude  Float
  longitude Float
  user      User?    @relation(fields: [userId], references: [id])
  task      Task?    @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id          String   @id @default(uuid())
  userId      String?
  eventType   String
  description String?
  metadata    Json
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}
