generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  sub                  String                @unique
  dataEntries          DataEntry[]
  logs                 Log[]
  accessibleCampaigns  UserCampaignAccess[]  @relation("UserCampaignAccess")
}

model Campaign {
  id               String                @id @default(uuid())
  name             String
  description      String?
  isOpen           Boolean               @default(true)
  deadline         DateTime?
  type             String
  gameId           String?
  subCampaigns     SubCampaign[]
  allowedUsers     UserCampaignAccess[]  @relation("UserCampaignAccess")
}

model SubCampaign {
  id          String        @id @default(uuid())
  name        String
  description String?
  campaignId  String
  campaign    Campaign       @relation(fields: [campaignId], references: [id])
  tasks       Task[]         // Relation with Tasks
  dataEntries DataEntry[]    // Relation with DataEntry
  polygon     Json    
}

model Task {
  id            String        @id @default(uuid())
  title         String
  description   String?
  type          String         // "survey", "photo", "instruction"
  taskData      Json           // Stores questions, options, etc.
  subCampaignId String
  subCampaign   SubCampaign    @relation(fields: [subCampaignId], references: [id])
  geoLocation   GeoLocation?   // Relation with GeoLocation, defined in GeoLocation
}

model GeoLocation {
  id          String        @id @default(uuid())
  name        String?
  type        String        // "point" or "polygon"
  task        Task?         @relation(fields: [taskId], references: [id]) // Relation defined here
  taskId      String? @unique  // One-to-One relation with Task
  coordinates Coordinate[]  // One-to-Many relation with Coordinate
}

model Coordinate {
  id          String        @id @default(uuid())
  latitude    Float         // Latitude
  longitude   Float         // Longitude
  geoLocation GeoLocation   @relation(fields: [geoLocationId], references: [id]) // One-to-Many relation with GeoLocation
  geoLocationId String
  dataEntry   DataEntry?    // One-to-One relation with DataEntry, defined in DataEntry
}

model UserCampaignAccess {
  id         String     @id @default(uuid())
  userId     String
  campaignId String
  assignedAt DateTime    @default(now())
  accessType String?     // "admin", "editor", "viewer", "contributor"
  user       User        @relation("UserCampaignAccess", fields: [userId], references: [id])
  campaign   Campaign    @relation("UserCampaignAccess", fields: [campaignId], references: [id])

  @@unique([userId, campaignId])
}

model DataEntry {
  id                 String         @id @default(uuid())
  userId             String?
  subCampaignId      String?
  entryTypeId        String?
  globalContribution Boolean        @default(false)
  data               Json
  user               User?          @relation(fields: [userId], references: [id])
  subCampaign        SubCampaign?   @relation(fields: [subCampaignId], references: [id])
  coordinate         Coordinate     @relation(fields: [coordinateId], references: [id]) // One-to-One relation with Coordinate
  coordinateId       String @unique
}

model Log {
  id          String     @id @default(uuid())
  timestamp   DateTime   @default(now())
  userId      String?
  eventType   String
  description String?
  ipAddress   String?
  metadata    Json
  user        User?      @relation(fields: [userId], references: [id])
}
